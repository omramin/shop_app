import 'package:flutter/foundation.dart';
// Bundle it all with the [http] prefix, accessing all the feature of the http package with [http.]
import 'package:http/http.dart' as http;
// to create JSON, to convert our map to JSON
import 'dart:convert';

import './cart.dart';

// defining how the order should look like
class OrderItem {
  final String id;
  final double amount;
  // which products were ordered
  final List<CartItem> products;
  final DateTime dateTime;

  OrderItem({
    @required this.id,
    @required this.amount,
    @required this.products,
    @required this.dateTime,
  });
}

class Orders with ChangeNotifier {
  List<OrderItem> _orders = [];

  List<OrderItem> get orders {
    return [..._orders];
  }

  // #Fetching Orders#
  Future<void> fetchAndSetOrders() async {
    final url = Uri.parse(
        'https://shop-app-708a5-default-rtdb.firebaseio.com/orders.json');
    final response = await http.get(url);
    // Helper List
    final List<OrderItem> loadedOrders = [];
    final extractedData = json.decode(response.body) as Map<String, dynamic>;
    // To make sure that this code won't run if extractedDate is null (has no oders)
    if (extractedData == null) {
      return;
    }
    // To go through all our keys and values in the map
    extractedData.forEach((orderId, orderData) {
      // Adding items to our [loadedOrders] list
      loadedOrders.add(
        OrderItem(
          id: orderId,
          amount: orderData['amount'],
          dateTime: DateTime.parse(orderData['dateTime']),
          // It's a list of dynamic values | a list of cart items
          products: (orderData['products'] as List<dynamic>)
              .map(
                (item) => CartItem(
                  id: item['id'],
                  price: item['price'],
                  quantity: item['quantity'],
                  title: item['title'],
                ),
              )
              .toList(),
        ),
      );
    });
    // to show the newest orders first on top
    _orders = loadedOrders.reversed.toList();
    notifyListeners();
  }

  Future<void> addOrder(List<CartItem> cartProducts, double total) async {
    // to avoid the difference in the timestamps| By this, we'll make sure to use the same time in the server & locally
    final timestamp = DateTime.now();
    final url = Uri.parse(
        'https://shop-app-708a5-default-rtdb.firebaseio.com/orders.json');
    final response = await http.post(url,
        body: json.encode({
          'amount': total,
          // [toIso8601String] Uniform string representation of dates which can easily convert back into a dateTime object when we load it into dart again (easily recreatable as a dateTime later)
          'dateTime': timestamp.toIso8601String(),
          // The products list needs to have the above [cartProducts] which is a list of cartItem, So we need to map these cartItems into maps and lastly convert it to a list
          // this map will run on every [cp] on every cartProduct and then we return a new map
          'products': cartProducts
              .map((cp) => {
                    'id': cp.id,
                    'title': cp.title,
                    'quantity': cp.quantity,
                    'price': cp.price
                  })
              .toList()
        }));

    // add VS insert :--> add: will always add it at the end of the list | insert 0 : add at the begining of the list
    // moving the existing elements of the list one index ahead to the end
    _orders.insert(
      0,
      OrderItem(
        // Using the same ID that generated by the server which stored in the response we get above
        id: json.decode(response.body)['name'],
        amount: total,
        dateTime: DateTime.now(),
        products: cartProducts,
      ),
    );
    notifyListeners();
  }

  // Old addOrder() FN
  // void addOrder(List<CartItem> cartProducts, double total) {
  //   // add VS insert :--> add: will always add it at the end of the list | insert 0 : add at the begining of the list
  //   // moving the existing elements of the list one index ahead to the end
  //   _orders.insert(
  //     0,
  //     OrderItem(
  //       id: DateTime.now().toString(),
  //       amount: total,
  //       dateTime: DateTime.now(),
  //       products: cartProducts,
  //     ),
  //   );
  //   notifyListeners();
  // }
}
